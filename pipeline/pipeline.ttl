@prefix rdfc: <https://w3id.org/rdf-connect#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix stapi: <https://w3id.org/stapi#> .
@prefix ex: <http://example.org/>.
@prefix tree: <https://w3id.org/tree#>.

### Import runners and processors
<> owl:imports <./node_modules/@rdfc/js-runner/index.ttl>.
<> owl:imports <https://javadoc.jitpack.io/com/github/rdf-connect/jvm-runner/runner/master-SNAPSHOT/runner-master-SNAPSHOT-index.jar>.

<> owl:imports <./node_modules/@rdfc/http-utils-processor-ts/processors.ttl>.
<> owl:imports <./node_modules/@rdfc/log-processor-ts/processor.ttl>.
<> owl:imports <./node_modules/@rdfc/file-utils-processors-ts/processors.ttl>.

# <> owl:imports <./build/plugins/rml-processor-jvm-master-SNAPSHOT-all.jar>.
<> owl:imports <./build/plugins/rml-processor-jvm-0.0.1-all.jar>.
<> owl:imports <./node_modules/@rdfc/shacl-processor-ts/processors.ttl>.
<> owl:imports <./node_modules/@rdfc/sds-processors-ts/configs/sdsify.ttl>.
<> owl:imports <./node_modules/@rdfc/sds-processors-ts/configs/bucketizer.ttl>.
<> owl:imports <./node_modules/@rdfc/sds-processors-ts/configs/ldes_disk_writer.ttl>.

<> owl:imports <./processors/sds-storage-writer-ts/processor.ttl>.
<> owl:imports <./node_modules/@rdfc/sensorthings-api-fetcher-ts/processor.ttl>.
# <> owl:imports <../../processors/sensorthings-api-fetcher-ts/processor.ttl>.

### Define the channels
<hamburg> a rdfc:Reader, rdfc:Writer.
<mappingData> a rdfc:Reader, rdfc:Writer.
<rdfdata> a rdfc:Reader, rdfc:Writer.

<sds> a rdfc:Reader, rdfc:Writer.
<metadata> a rdfc:Reader, rdfc:Writer. 
<bucketized> a rdfc:Reader, rdfc:Writer.
<bucketizedMetadata> a rdfc:Reader, rdfc:Writer.

<out> a rdfc:Reader, rdfc:Writer.


### Define the pipeline
<> a rdfc:Pipeline;
   rdfc:consistsOf [
       rdfc:instantiates rdfc:NodeRunner;
       rdfc:processor <fetcher>, <mappingReader>, <metadataReader>, <sdsify>, <bucketizer>, <ingest>, <logger>; 
   ], [
       rdfc:instantiates rdfc:JvmRunner;
       rdfc:processor <mapper>;
   ].


### Define the processors


# fetcher to get SensorThings API data
<fetcher> a rdfc:SensorThingsFetcher;
    rdfc:datastream "https://iot.hamburg.de/v1.1/Datastreams(26110)";
    rdfc:writer <hamburg> ;
    rdfc:mqttURL "mqtt://tld.iot.hamburg.de:1883".

# Processor to read and stream out the RML mappings
<mappingReader> a rdfc:GlobRead;
    rdfc:glob <./mappings/stapi-to-rdf.rml.ttl>;
    rdfc:output <mappingData>;
    rdfc:closeOnEnd false .

# Processor to do the RML mapping
<mapper> a rdfc:RmlMapper;
    rdfc:mappings <mappingData> ;
    rdfc:source [
        rdfc:triggers true;
        rdfc:reader <hamburg>;
        rdfc:mappingId ex:source1;
    ];
    rdfc:defaultTarget [
        rdfc:writer <rdfdata>;
        rdfc:format "turtle";
    ].
    

<sdsify> a rdfc:Sdsify;
    rdfc:input <rdfdata>;
    rdfc:output <sds>;
    rdfc:stream <http://ex.org/HamburgLDES>;
    rdfc:typeFilter stapi:Observation;
    rdfc:timestampPath stapi:resultTime;
    rdfc:shape """
    
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix stapi: <https://w3id.org/stapi#> .
@prefix : <http://example.org/> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix time: <http://www.w3.org/2006/time#> .

#################################################################
# Single NodeShape: Observation
#################################################################
:ObservationShape
    a sh:NodeShape ;
    sh:targetClass stapi:Observation ;

    # sh:property [ sh:path stapi:phenomenonTime ] ;
    sh:property [ sh:path stapi:result ] ;
    sh:property [ sh:path stapi:resultTime ] ;
    sh:property [
        sh:path stapi:phenomenonTime ;
        sh:node [
            a sh:NodeShape ;
            sh:targetClass time:Interval ;

            # Beginning instant
            sh:property [
                sh:path time:hasBeginning ;
                sh:node [
                    a sh:NodeShape ;
                    sh:targetClass time:Instant ;
                    sh:property [
                        sh:path time:inXSDDateTimeStamp ;
                        sh:datatype xsd:dateTime ;
                    ]
                ] ;
            ] ;

            # End instant
            sh:property [
                sh:path time:hasEnd ;
                sh:node [
                    a sh:NodeShape ;
                    sh:targetClass time:Instant ;
                    sh:property [
                        sh:path time:inXSDDateTimeStamp ;
                        sh:datatype xsd:dateTime ;
                    ]
                ] ;
            ] ;

            # Optional duration
            sh:property [
                sh:path time:hasXSDDuration ;
                sh:datatype xsd:duration ;
                sh:maxCount 1 ;
            ] ;
        ] ;
        sh:minCount 1 ;
    ] ;

    #################################################################
    # Feature of Interest
    #################################################################


    sh:property [
        sh:path stapi:featureOfInterest ;
        sh:node [
            a sh:NodeShape ;
            sh:property [ sh:path stapi:description ] ;
            sh:property [ sh:path stapi:encodingType ] ;
            sh:property [ sh:path stapi:feature ] ;
            sh:property [ sh:path stapi:name ] ;
        ] ;
    ] ;

    #################################################################
    # Datastream
    #################################################################
    sh:property [
        sh:path stapi:datastream ;
        sh:node [
            a sh:NodeShape ;
            sh:property [ sh:path stapi:description ] ;
            sh:property [ sh:path stapi:name ] ;
            sh:property [ sh:path stapi:observationType ] ;
            sh:property [ sh:path stapi:observedArea ] ;
            sh:property [ sh:path stapi:phenomenonTime ] ;
            sh:property [ sh:path stapi:properties ] ;
            sh:property [ sh:path stapi:resultTime ] ;
            sh:property [ sh:path stapi:unitOfMeasurement ] ;

            #################################################################
            # Observed Property
            #################################################################

            sh:property [
                sh:path stapi:observedProperty ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [ sh:path stapi:definition ] ;
                    sh:property [ sh:path stapi:description ] ;
                    sh:property [ sh:path stapi:name ] ;
                ] ;
            ] ;
            
            #################################################################
            # Sensor
            #################################################################

            sh:property [
                sh:path stapi:sensor ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [ sh:path stapi:description ] ;
                    sh:property [ sh:path stapi:encodingType ] ;
                    sh:property [ sh:path stapi:metadata ] ;
                    sh:property [ sh:path stapi:name ] ;
                ] ;
            ] ;

            #################################################################
            # Thing
            #################################################################

            sh:property [
                sh:path stapi:thing ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [ sh:path stapi:description ] ;
                    sh:property [ sh:path stapi:name ] ;
                    sh:property [ sh:path stapi:properties ] ;
                    sh:property [
                        sh:path stapi:locations ;
                        sh:node [
                            a sh:NodeShape ;
                            sh:property [
                                sh:path geo:hasGeometry ;
                                sh:node [
                                    a sh:NodeShape ;
                                ] ;
                            ] ;
                            
                        ] ;
                    ] ;
                ] ;
            ] ;
        ] ;
    ] .


    """.

# Processor to read and stream out the RML mappings
<metadataReader> a rdfc:GlobRead;
    rdfc:glob <./metadata.ttl>;
    rdfc:output <metadata>;
    rdfc:closeOnEnd false .

<bucketizer> a rdfc:Bucketize;
    rdfc:channels [
        rdfc:dataInput <sds>;
        rdfc:metadataInput <metadata>;
        rdfc:dataOutput <bucketized>;
        rdfc:metadataOutput <bucketizedMetadata>;
    ];
    rdfc:bucketizeStrategy [
        a tree:TimebasedFragmentation;
        tree:timestampPath stapi:resultTime;
        tree:maxSize 100;
        tree:k 4;
        tree:minBucketSpan 3600;        # In seconds
    ];
    rdfc:savePath <./buckets_save.json>;
    rdfc:outputStreamId <https://w3id.org/sds#Stream>;
    rdfc:prefix "root/".                  # The root fragment is located at '/root/' this defaults to ''


<ingest> a rdfc:Ingest;
    rdfc:dataInput <bucketized>;
    rdfc:metadataInput <bucketizedMetadata>;
    rdfc:database [ 
        rdfc:url <mongodb://root:password@mongodb:27017/hamburg?authSource=admin>; # for docker environment
        # rdfc:url <mongodb://localhost:27017/hamburg>; # for local testing
        rdfc:metadata "META";
        rdfc:data "DATA";
        rdfc:index "INDEX";
    ].




# ###########
# # Logging #
# ###########

# Processor to log the output
<logger> a rdfc:LogProcessorJs;
    rdfc:reader <hamburg>;
    rdfc:level "info";
    rdfc:label "out".